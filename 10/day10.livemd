# Advent of Code 2021, Day 10

## Dependencies

```elixir
Mix.install([{:kino, github: "livebook-dev/kino"}])
```

```elixir
input = Kino.Input.textarea("Enter your program:")
```

```elixir
lines =
  Kino.Input.read(input)
  |> String.split("\n", trim: true)
  |> Enum.map(&String.to_charlist/1)

length(lines)
```

```elixir
closing = %{
  ?\[ => ?\],
  ?\{ => ?\},
  ?\( => ?\),
  ?\< => ?\>
}
```

```elixir
mismatched_paren = fn line, ch, acc ->
  # IO.puts("#{line} - Expected #{<<hd(acc)>>}, but found #{<<ch>>} instead.")
  %{expected: hd(acc), found: ch}
end

scan = fn line ->
  result =
    Enum.reduce_while(line, [], fn
      ch, acc when ch in [?\[, ?\{, ?\(, ?\<] ->
        {:cont, [closing[ch] | acc]}

      ch, _acc = [ch | rest] ->
        {:cont, rest}

      ch, acc = [_ | _] ->
        {:halt, mismatched_paren.(line, ch, acc)}
    end)

  case result do
    [] -> :ok
    stack = [_ | _] -> {:incomplete, stack}
    _ -> {:corrupt, result}
  end
end
```

## Part 1

```elixir
points_for = fn
  ?\) -> 3
  ?\] -> 57
  ?\} -> 1197
  ?\> -> 25137
end
```

```elixir
lines
|> Enum.map(scan)
|> Enum.reduce(0, fn
  {:corrupt, %{found: ch}}, acc -> acc + points_for.(ch)
  _, acc -> acc
end)
```

## Part 2

```elixir
completion_score = fn stack ->
  Enum.reduce(stack, 0, fn
    ?\), acc -> acc * 5 + 1
    ?\], acc -> acc * 5 + 2
    ?\}, acc -> acc * 5 + 3
    ?\>, acc -> acc * 5 + 4
  end)
end

288_957 = completion_score.('}}]])})]')
5566 = completion_score.(')}>]})')
1_480_781 = completion_score.('}}>}>))))')
995_444 = completion_score.(']]}}]}]}>')
294 = completion_score.('])}>')
:pass
```

```elixir
scores =
  lines
  |> Enum.map(scan)
  |> Enum.reduce([], fn
    {:incomplete, stack}, acc -> [completion_score.(stack) | acc]
    _, acc -> acc
  end)
  |> Enum.sort()

pos = div(Enum.count(scores), 2)
Enum.at(scores, pos)
```
