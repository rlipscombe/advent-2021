# Advent of Code 2021, Day 11

## Dependencies

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino"},
  {:vega_lite, "~> 0.1.2"},
  {:jason, "~> 1.2"}
])

alias VegaLite, as: Vl
:ok
```

## Input

```elixir
input = Kino.Input.textarea("Puzzle Input")
```

## Conversion

```elixir
values =
  Kino.Input.read(input)
  |> String.split("\n", trim: true)
  |> Enum.with_index(fn line, y ->
    String.to_charlist(line)
    |> Enum.with_index(fn ch, x -> %{x: x, y: y, energy: ch - ?0} end)
  end)
  |> List.flatten()
  |> Enum.reduce(%{}, fn %{x: x, y: y, energy: e}, acc ->
    Map.put(acc, {x, y}, e)
  end)
```

```elixir
{{{x0, _}, _}, {{x1, _}, _}} = Enum.min_max_by(values, fn {{x, _}, _} -> x end)
{{{_, y0}, _}, {{_, y1}, _}} = Enum.min_max_by(values, fn {{_, y}, _} -> y end)
range = for x <- x0..x1, y <- y0..y1, do: {x, y}
bounds = {x0..x1, y0..y1}
```

## Rendering Function

```elixir
transform = fn values ->
  Enum.map(values, fn {{x, y}, e} -> %{x: x, y: y, energy: e} end)
end

render = fn title, values ->
  Vl.new(title: title, width: 300, height: 300)
  |> Vl.data(values: transform.(values))
  |> Vl.layers([
    Vl.new()
    |> Vl.mark(:rect)
    |> Vl.encode_field(:x, "x")
    |> Vl.encode_field(:y, "y")
    |> Vl.encode_field(:color, "energy",
      type: :ordinal,
      legend: nil,
      scale: [scheme: "blues", domain: Enum.to_list(1..9)]
    ),
    Vl.new()
    |> Vl.mark(:text)
    |> Vl.encode_field(:x, "x")
    |> Vl.encode_field(:y, "y")
    |> Vl.encode_field(:text, "energy")
  ])
end

render.("Step 0", values)
```

## Steps

```elixir
defmodule Step do
  # TODO: new(values, bounds) :: __MODULE__{etc}

  def step(values, bounds, range) do
    values = evolve(values, range)
    values = ripple(values, bounds, [])
    count = Enum.count(values, fn {{_, _}, e} -> e >= 10 end)
    values = ground(values)
    {count, values}
  end

  defp ground(values) do
    Enum.reduce(values, %{}, fn
      {{x, y}, e}, acc when e >= 10 ->
        Map.put(acc, {x, y}, 0)

      {{x, y}, e}, acc ->
        Map.put(acc, {x, y}, e)
    end)
  end

  defp neighbours(_bounds = {x0..x1, y0..y1}, _pos = {x, y}) do
    all = [
      {x - 1, y - 1},
      {x, y - 1},
      {x + 1, y - 1},
      {x - 1, y},
      {x + 1, y},
      {x - 1, y + 1},
      {x, y + 1},
      {x + 1, y + 1}
    ]

    for {x, y} <- all, x >= x0, x <= x1, y >= y0, y <= y1, do: {x, y}
  end

  defp evolve(values, range) do
    Enum.reduce(range, values, fn {x, y}, acc ->
      Map.update!(acc, {x, y}, fn e -> e + 1 end)
    end)
  end

  defp ripple(values, bounds, old_flashes) do
    flashed =
      Enum.filter(values, fn {{_, _}, e} -> e >= 10 end)
      |> Enum.map(fn {{x, y}, _} -> {x, y} end)

    new_flashes = flashed -- old_flashes

    case new_flashes do
      [] ->
        values

      flashes ->
        # It's fine for an octopus to appear in here multiple times, because
        # it might be the neighbour of multiple flashing octopodes.
        neighbours = Enum.flat_map(flashes, &neighbours(bounds, &1))
        values = evolve(values, neighbours)
        ripple(values, bounds, flashed)
    end
  end
end
```

## After step 1

```elixir
values0 = values
{count, values1} = Step.step(values0, bounds, range)
IO.puts(count)
render.("After step 1", values1)
```

## After step 2

```elixir
{count, values2} = Step.step(values1, bounds, range)
IO.puts(count)
render.("After step 2", values2)
```

## After step 3

```elixir
{count, values3} = Step.step(values2, bounds, range)
IO.puts(count)
render.("After step 3", values3)
```

## Part 1 Solution

```elixir
Enum.reduce(1..100, {0, values}, fn _, {total, values} ->
  {count, values} = Step.step(values, bounds, range)
  {total + count, values}
end)
```

## Part 2 Exploration

```elixir
after_step = fn step ->
  values =
    Enum.reduce(1..step, values, fn _, values ->
      {_, values} = Step.step(values, bounds, range)
      values
    end)

  render.("After step #{step}", values)
end
```

```elixir
after_step.(193)
```

```elixir
after_step.(194)
```

```elixir
after_step.(195)
```

## Part 2 Solution

```elixir
defmodule Iterate do
  def run(values, bounds, range, fun), do: step(values, bounds, range, 1, fun)

  defp step(values, bounds, range, step, fun) when step < 5000 do
    {count, next} = Step.step(values, bounds, range)

    case fun.(step, count, next) do
      :cont -> step(next, bounds, range, step + 1, fun)
      {:halt, result} -> result
    end
  end
end
```

```elixir
Iterate.run(values, bounds, range, fn
  _, count, _ when count < 100 -> :cont
  step, _, _ -> {:halt, step}
end)
```

```elixir
save = fn step, values ->
  prefix = Integer.to_string(step) |> String.pad_leading(3, "0")
  IO.puts("#{prefix}")
  render.("After step #{step}", values) |> Vl.Export.save!("#{prefix}.png")
end

Iterate.run(values, bounds, range, fn
  step, count, values when count < 100 ->
    save.(step, values)
    :cont

  step, _, values ->
    save.(step, values)
    {:halt, step}
end)
```

Run the following to create an animated GIF:

```bash
convert -loop 0 -delay 3 *.png -delay 200 195.png day11.gif
```
